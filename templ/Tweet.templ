package templ

import (
	"htmxx/model"
	"fmt"
)

templ likes(tweet *model.Tweet) {
	<button
		hx-ext="back-to-the-future"
		class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-8 px-1"
		hx-post={ getStringURL("like", tweet.ID) }
		hx-target={ getHXSelector("like-count", tweet.ID) }
		hx-swap="innerHTML"
		type="button"
	>
		@Heart(tweet.ID, tweet.LikedBySelf, false)
		<span
			id={ getIDName("like-count", tweet.ID) }
			sse-swap={ getIDName("like-count", tweet.ID) }
			class="ml-1 tabular-nums"
		>
			{ fmt.Sprintf("%d", len(tweet.LikedBy)) }
		</span>
	</button>
	<button
		class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-8 px-1"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="w-4 h-4"
		>
			<path d="m17 2 4 4-4 4"></path>
			<path d="M3 11v-1a4 4 0 0 1 4-4h14"></path>
			<path d="m7 22-4-4 4-4"></path>
			<path d="M21 13v1a4 4 0 0 1-4 4H3"></path>
		</svg>
		<span id="retweet-button-text" class="hidden md:inline">Retweet</span>
	</button>
	<button
		class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-8 px-1"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="w-4 h-4"
		>
			<path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z"></path>
		</svg>
		<span id="reply-button-text" class="hidden md:inline">Reply</span>
	</button>
	<button
		class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-8 px-1"
		hx-post={ getStringURL("bookmark", tweet.ID) }
	>
		@Bookmark(tweet.ID, tweet.BookmarkedBySelf)
	</button>
	if tweet.IsAuthor {
		<template x-if={ fmt.Sprintf("currentUser=='%s'", tweet.Author) } x-cloak>
			<button
				hx-delete={ getIDURL(" tweet", tweet.ID) }
				hx-target={ getHXSelector("tweet", tweet.ID) }
				hx-trigger="confirmed"
				onClick="Swal.fire({title: 'Delete Tweet?', text:'Do you want to deletet this tweet?', icon: 'warning', showCancelButton: true, confirmButtonText: 'Delete', confirmButtonColor: '#e3342f', cancelButtonText: 'Cancel', cancelButtonColor: '#4b5563'}).then((result) => {
            if(result.isConfirmed){
              htmx.trigger(this, 'confirmed');  
            } 
        })"
				hx-swap="innerHTML"
				class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-8 px-1"
				type="button"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="w-4 h-4"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
					></path>
				</svg>
				<span id="delete-button-text" class="hidden md:inline">Delete</span>
			</button>
		</template>
	}
}

templ Bookmark(id int, bookmarkedBySelf bool) {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
		if bookmarkedBySelf {
			class="w-4 h-4 fill-black"
		} else {
			class="w-4 h-4"
		}
	>
		<path
			d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z"
		></path>
	</svg>
	<span id={ getIDName("bookmark-button-text", id) } class="hidden md:inline">
		if bookmarkedBySelf {
			Unbookmark
		} else {
			Bookmark
		}
	</span>
}

templ Tweet(tweet *model.Tweet, compact bool) {
	<div
		id={ getIDName("tweet", tweet.ID) }
		class="border border-gray-200 rounded-lg p-4 htmx-added:opacity-0 opacity-100 transition-opacity duration-500"
	>
		<div class="flex items-start p-4 space-x-2">
			<span class="relative flex shrink-0 overflow-hidden rounded-full w-12 h-12">
				<a href={ templ.SafeURL(getProfileURL(tweet.Author)) }>
					<img
						class="aspect-square h-full w-full"
						alt="username"
						src="/static/placeholder-user.jpg"
					/>
				</a>
			</span>
			<div class="flex-col flex-1">
				<div class="grid gap 1.5 text-sm">
					<div class="flex-col w-full items-center gap-1.5">
						<div id={ getIDName("tweet-author", tweet.ID) }>
							<a href={ templ.SafeURL(getProfileURL(tweet.Author)) }>
								<span class="font-medium">
									{ fmt.Sprintf("%s", tweet.Author) }
								</span>
							</a>
						</div>
						<div id="tweet-{ tweet.ID }-created">
							<span class="text-gray-600 text-xs">
								{ fmt.Sprintf("%s", tweet.Created.Format("2006-01-02 15:04:05")) }
							</span>
						</div>
					</div>
					<div
						class="text-sm"
						hx-get={ getIDURL("tweet", tweet.ID) }
						hx-target="body"
						hx-swap="outerHTML"
						hx-push-url="true"
					>
						if compact {
							<article class="prose" hx-disable>{ shortenTweet(tweet) }</article>
						} else {
							<article class="prose" hx-disable>{ tweet.Content }</article>
						}
					</div>
				</div>
				if !compact {
					<div class="grid gap-1.5 text-sm">
						<div class="flex items-center gap-4 text-xs">
							@likes(tweet)
						</div>
					</div>
				}
			</div>
		</div>
	</div>
}

templ Heart(id int, likedBySelf bool, oob bool) {
	<svg
		id={ getIDName("like-icon", id) }
		if oob {
			hx-swap-oob="true"
		}
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
		if likedBySelf {
			class="w-4 h-4 fill-red-500"
		} else {
			class="w-4 h-4"
		}
	>
		<path
			d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"
		></path>
	</svg>
}

templ IndivTweet(tweet *model.Tweet) {
	@TopBar(tweet.Author, "Tweet")
	<div id="timeline" class="grid grid-cols-1 gap-2">
		@Tweet(tweet, false)
	</div>
}

templ TopBar(item string, desc string) {
	<div class="flex items-center pt-4 pb-2">
		<a
			onclick="window.history.back()"
			class="flex items-center gap-2 text-sm font-medium text-accent hover:cursor-pointer"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-4 h-4"
			>
				<path d="M15 18l-6-6 6-6"></path>
			</svg>
			<span>Back</span>
		</a>
		<div class="flex-1 text-center-wrap break-all">
			<h2 class="text-2xl font-bold text-center pb-2">{ fmt.Sprintf("%s's %s", item, desc) }</h2>
		</div>
	</div>
}

func shortenTweet(tweet *model.Tweet) string {
	if len(tweet.Content) > 140 {
		return tweet.Content[:140] + "..."
	}
	return tweet.Content
}
